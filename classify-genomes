#!/usr/bin/env python

from __future__ import division
import os
import errno
import sys
import argparse
import shlex
import shutil
import time
import subprocess
import glob
import multiprocessing
import tempfile
from collections import Counter


# position of the script -------------------------------------------------------
path_mOTUs = os.path.realpath(__file__)
path_array = path_mOTUs.split("/")
relative_path = "/".join(path_array[0:-1])
relative_path = relative_path + "/"

# check if setup.py has been ran already ---------------------------------------
if not(os.path.isdir(relative_path+'db_mOTU')):
    sys.stderr.write("[E::main] Error: database has not been downloaded. Run setup.py before using the motus profiler\n\n")
    sys.exit(1)


# ------------------------------------------------------------------------------
#       print the help informations
# ------------------------------------------------------------------------------
class CapitalisedHelpFormatter(argparse.HelpFormatter):
    def add_usage(self, usage, actions, groups, prefix=None):
        if prefix is None:
            prefix = ''
        return super(CapitalisedHelpFormatter, self).add_usage(usage, actions, groups, prefix)


def msg(name=None):
    str_msg = '''
\00
Program: classify-genomes - a tool for genome taxonomy annotation

Usage: classify-genomes <fasta_file> [options]

Options:
  -t  INT     number of threads [1]
  -v  INT     verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]
  -o  FILE    output file name [stdout]
  -m  FILE    save the 10 marker genes [None]
  -s          short output format (one-line output)
  -S          map to specI, instead of mOTUs
  -db STR     database: nr=non-reduntant, cen=centroids [nr]
        '''
    return str_msg

# ------------------------------------------------------------------------------
# function to check if a specific tool exists
def is_tool(name):
    try:
        devnull = open(os.devnull)
        subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
    except OSError as e:
        if e.errno == errno.ENOENT:
            return False
    return True


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------
def main(argv=None):

    devnull = open(os.devnull)

    parser = argparse.ArgumentParser(usage=msg(), formatter_class=CapitalisedHelpFormatter,add_help=False)
    parser.add_argument('fasta_file', action="store", default=None, help='fasta file')
    parser.add_argument('-v', action='store', type=int, default=None, dest='verbose', help='Verbose levels')
    parser.add_argument('-t', type=int, action="store", dest='threads', default=None, help='Number of threads to be used.')
    parser.add_argument('-o', action="store", dest='output', default=None, help='name of output file')
    parser.add_argument('-m', action="store", dest='save_10_MGs', default=None, help='save the 10 marker genes')
    parser.add_argument('-s', action='store_true', default=None, dest='short_output', help='print the output in only one line')
    parser.add_argument('-S', action='store_true', default=None, dest='map_to_specI', help='map to specI, instead of mOTUs')
    parser.add_argument('-db', action='store', default=None, dest='db', help='select the db (nr or centroids)',choices=['nr','cen'])
    args = parser.parse_args()

    # set default for args.verbose
    if (args.verbose is None): args.verbose = 3

    # set the default
    if (args.db is None): args.db = "nr"
    if (args.output is None): args.output = ""
    if (args.threads is None): args.threads = 1
    if (args.save_10_MGs is None): args.save_10_MGs = ""
    if (args.short_output is None): args.short_output = False
    if (args.map_to_specI is None): args.map_to_specI = False

    # name fasta file
    fasta_name = args.fasta_file.split("/")[-1]

    # ---------------------- check general parameters --------------------------
    if args.verbose < 1:
        sys.stderr.write("[E::main] Error: verbose level (-v) is less than 1\n")
        sys.exit(1)
    if args.threads < 1:
        sys.stderr.write("[E::main] Error: number of threads (-t) is less than 1\n")
        sys.exit(1)

    # COG that we evaluate
    marker_genes = {'COG0012':0, 'COG0016':1, 'COG0018':2, 'COG0172':3, 'COG0215':4, 'COG0495':5, 'COG0525':6, 'COG0533':7, 'COG0541':8, 'COG0552':9}

    # --------------------------------------------------------------------------
    #   0. CHECK DEPENDENCIES
    # --------------------------------------------------------------------------
    # Perl
    #if not is_tool("perl --version"):
    #    sys.stderr.write("[E::main] Error: perl is not in the path. Please install perl.\n")
    #    sys.exit(1)

    # cdbtools
    if not is_tool("cdbyank"):
        sys.stderr.write("[E::main] Error: cdbtools is not in the path. Please install cdbtools.\n")
        sys.exit(1)

    # Prodigal
    if not is_tool("prodigal"):
        sys.stderr.write("[E::main] Error: prodigal is not in the path. Please install prodigal.\n")
        sys.exit(1)

    # SAMtools
    if not is_tool("samtools"):
        sys.stderr.write("[E::main] Error: samtools is not in the path. Please install samtools.\n")
        sys.exit(1)

    # HMMER
    if not is_tool("hmmsearch"):
        sys.stderr.write("[E::main] Error: hmmsearch is not in the path. Please install HMMER.\n")
        sys.exit(1)

    # vsearch
    if not is_tool("vsearch"):
        sys.stderr.write("[E::main] Error: vsearch is not in the path. Please install vsearch.\n")
        sys.exit(1)


    # --------------------------------------------------------------------------
    #   1. EXTRACT GENES
    # --------------------------------------------------------------------------
    # create a temp dir to save the intermediate results
    if args.verbose > 2: sys.stderr.write("Extract genes\n")

    genes = tempfile.mkdtemp()

    # count the number of founded genes
    founded_genes = {'COG0012':0, 'COG0016':0, 'COG0018':0, 'COG0172':0, 'COG0215':0, 'COG0495':0, 'COG0525':0, 'COG0533':0, 'COG0541':0, 'COG0552':0}


    find_genes = "python "+ relative_path + 'makePaddedMG.py ' + args.fasta_file
    find_genes = find_genes + " " +genes+"/tmp1 tmp2 --padLength 0 --numThreads "+str(args.threads)
    if args.verbose > 3:
        sys.stderr.write("call: "+find_genes+"\n")

    find_genesCMD = shlex.split(find_genes)
    if args.verbose > 3:
        find_genes_cmd = subprocess.Popen(find_genesCMD)
    else:
        dummy_file = tempfile.NamedTemporaryFile(mode="w")
        find_genes_cmd = subprocess.Popen(find_genesCMD,stdout=dummy_file, stderr=dummy_file)
    return_code = find_genes_cmd.wait()
    if return_code:
        sys.stderr.write("[E::main] Error: extracting genes failed.\n")
        sys.exit(1)

    # save the genes to a file
    genes_temp_file = tempfile.NamedTemporaryFile(delete=False, mode="w")
    os.chmod(genes_temp_file.name, 0o644)
    if args.verbose > 3:
        sys.stderr.write("temp file with genes: "+genes_temp_file.name+"\n")

    for i in marker_genes:
        file_g = open(genes+"/tmp1/tmp2_markerGenes/"+i+".fna","r")
        cont = 1
        for k in file_g:
            if k.startswith(">"):
                genes_temp_file.write(">"+i+"_"+str(cont)+"\n")
                cont = cont + 1
                founded_genes[i] = founded_genes[i] + 1 # update dict with the number of founded genes
            else:
                genes_temp_file.write(k)

    # close the temp file (but not deleted)
    genes_temp_file.flush()
    os.fsync(genes_temp_file.fileno())
    genes_temp_file.close()

    # remove temp dir
    shutil.rmtree(os.path.abspath(os.path.join(genes)))

    if args.verbose > 4:
        sys.stderr.write("\nfounded_genes:\n")
        for ii in founded_genes:
            sys.stderr.write(str(ii)+": "+str(founded_genes[i])+"\n")

    ## =========================================================================
    # if genes are detected, then we map them with vsearch
    if sum(founded_genes.values()) != 0:

        # --------------------------------------------------------------------------
        #   2. MAP GENES TO DATABASE
        # --------------------------------------------------------------------------
        # now in genes_temp_file.name we have all the extracted genes
        if args.verbose > 2: sys.stderr.write("Map genes to mOTUs database\n")

        # load COG cutoffs
        if args.verbose > 4: sys.stderr.write("  load cutoffs\n")
        all_cutoffs = dict()
        cutoff_f = open(relative_path+"lib/cutoffs_specI_40MGs_new.txt","r")
        for i in cutoff_f:
            all_v = i.rstrip().split("\t")
            all_cutoffs[all_v[0]] = float(all_v[1])
        cutoff_f.close()


        vsearch_res = tempfile.NamedTemporaryFile(delete=False, mode="w")
        os.chmod(vsearch_res.name, 0o644)
        if args.verbose > 3:
            sys.stderr.write("temp file with result from vsearch: "+vsearch_res.name+"\n")

        if args.db == "nr":
            map_genes = "vsearch --usearch_global "+genes_temp_file.name+" --db "+relative_path+"db_mOTU/db_mOTU_DB_NR.fasta --id 0.94 --blast6out "+vsearch_res.name+" --minqt 0.7 --maxrejects 10000 --threads "+str(args.threads)
        else:
            map_genes = "vsearch --usearch_global "+genes_temp_file.name+" --db "+relative_path+"db_mOTU/db_mOTU_DB_CEN.fasta --id 0.94 --blast6out "+vsearch_res.name+" --minqt 0.7 --maxrejects 10000 --threads "+str(args.threads)

        map_genesCMD = shlex.split(map_genes)
        if args.verbose > 3:
            map_genes_cmd = subprocess.Popen(map_genesCMD)
        else:
            map_genes_cmd = subprocess.Popen(map_genesCMD,stdout=devnull, stderr=devnull)
        return_code = map_genes_cmd.wait()
        if return_code:
            sys.stderr.write("Error: vsearch failed")
            sys.exit(1)

        # parse result from vsearch
        matches = dict()
        all_matched_perc_id = dict()
        tp = open(vsearch_res.name,"r")
        for i in tp:
            vals = i.rstrip().split("\t")
            all_matched_perc_id[vals[0]] = vals[2]
            i_cog_type = vals[0].split("_")[0]
            perc_id = float(vals[2])
            if perc_id > all_cutoffs[i_cog_type]:
                # add
                query = vals[0]
                matches[query] = vals[1]
        tp.close()

        # remove file with the results from vsearch
        os.remove(os.path.abspath(os.path.join(vsearch_res.name)))

        # decide what to do with the genes file
        if args.save_10_MGs != "": # save it somewhere
            try:
                shutil.move(genes_temp_file.name,args.save_10_MGs) #It is not atomic if the files are on different filsystems.
            except:
                sys.stderr.write("[E::main] Error: failed to save the marker genes sequences\n")
                os.remove(os.path.abspath(os.path.join(genes_temp_file.name)))
        else: # or delete it
            os.remove(os.path.abspath(os.path.join(genes_temp_file.name)))


        # --------------------------------------------------------------------------
        #   3. FIND MOTUS FROM THE MAPPED GENES
        # --------------------------------------------------------------------------
        # now in matches we have the motus database ids
        if args.verbose > 2: sys.stderr.write("Find taxonomy\n")

        # load gene -> MGC
        f_gene2mgc = open(relative_path+"db_mOTU/db_mOTU_MAP_genes_to_MGCs.tsv","r")
        gene2mgc = dict()
        for i in f_gene2mgc:
            all_v = i.rstrip().split("\t")
            gene2mgc[all_v[0]] = all_v[3]
        f_gene2mgc.close()
        # load MGC -> mOTUs
        f_mgc2motus = open(relative_path+"db_mOTU/db_mOTU_MAP_MGCs_to_mOTUs.tsv","r")
        mgc2motu = dict()
        for i in f_mgc2motus:
            all_v = i.rstrip().split("\t")
            mgc2motu[all_v[0]] = all_v[1]
        f_mgc2motus.close()
        # load ref-mOTUs taxonomy
        tax = dict()

        f_ref_tax = open(relative_path+"db_mOTU/db_mOTU_taxonomy_ref-mOTUs.tsv","r")
        for i in f_ref_tax:
            all_v = i.rstrip().split("\t")
            if all_v[1] != "not_profilable":
                tax[all_v[1]] = all_v[8]
        f_ref_tax.close()
        # load meta-mOTUs taxonomy
        f_meta_tax = open(relative_path+"db_mOTU/db_mOTU_taxonomy_meta-mOTUs.tsv","r")
        for i in f_meta_tax:
            all_v = i.rstrip().split("\t")
            tax[all_v[0]] = all_v[7]
        f_meta_tax.close()

        # find match for the mapped genes
        motus_match = dict()
        n_min_1 = 0 # number of genes that maps to -1
        for i in matches:
            if args.db == "nr":
                motu_m = mgc2motu[gene2mgc[matches[i]]]
            else:
                str_with_gene_id = ".".join(matches[i].split(".")[1].split("_"))
                motu_m = mgc2motu[gene2mgc[str_with_gene_id]]
            # if we map only to specI, what maps to meta-mOTUs is considered as -1
            if args.map_to_specI:
                if motu_m.startswith("meta"):
                    motu_m = "-1"
                    n_min_1 = n_min_1 + 1

            # assign correct match
            if motu_m != "-1":
                motus_match[i] = tax[motu_m] + "@" + motu_m
            else:
                n_min_1 = n_min_1 + 1

        # taxonomies
        if len(motus_match) == 0:
            best = "no match"
            aggr_g = "NA"
        else:
            all_tax = dict(Counter(motus_match.values()))
            max_agree = max(all_tax.values())
            n_max = 0
            for i in all_tax:
                if all_tax[i] == max_agree:
                    n_max = n_max + 1
                    best = i
            if n_max > 1:
                best = "inconsistent"
                aggr_g = "NA"
            else:
                aggr_g = str( ( max_agree/(sum(all_tax.values())) ) * 100 )+"%"

   ## =========================================================================
   # if no genes are detected, then no need to run vsearch and map motus
    else:
        best = "no_genes"

    # general print
    if args.output != "":
        outfile = tempfile.NamedTemporaryFile(delete=False, mode="w")
        os.chmod(outfile.name, 0o644)
    else:
        outfile = sys.stdout
        if args.verbose > 2: sys.stderr.write("\nRESULT:\n")

    # split best into NCBI_id, NCBI_taxonomy and mOTU
    if best == "no match":
        best_id = "no match"
        best_taxonomy = "no match"
        best_motu = "no match"
        # dummy variable
        all_tax = {"dummy_var": 0}
    elif best == "inconsistent":
        best_id = "inconsistent"
        best_taxonomy = "inconsistent"
        best_motu = "inconsistent"
    elif best == "no_genes":
        best_id = "NA"
        best_taxonomy = "NA"
        best_motu = "NA"
        all_tax = {"dummy_var": 0}
        founded_genes = {"dummy_var": 0}
        n_min_1 = 0
        aggr_g = "0%"
        motus_match = list()
    else:
        best_id = best.split(" ")[0]
        best_taxonomy = " ".join(best.split(" ")[1:]).split("@")[0]
        best_motu = best.split("@")[1]


    if args.short_output: # print res in one line
        outfile.write(fasta_name+"\t")
        outfile.write(best_id+"\t")
        outfile.write(best_taxonomy+"\t")
        if args.map_to_specI:
            outfile.write(best_motu.replace("ref_mOTU_v25_","specI_v3_")+"\t")
        else:
            outfile.write(best_motu+"\t")
        outfile.write(str(sum(founded_genes.values()))+"\t")
        outfile.write(str(sum(all_tax.values()))+"\t")
        outfile.write(str(n_min_1)+"\t")
        outfile.write(aggr_g)
        for i in motus_match:
            if args.map_to_specI:
                outfile.write("\t"+i+"\t"+all_matched_perc_id[i]+"\t"+motus_match[i].replace("ref_mOTU_v25_","specI_v3_"))
            else:
                outfile.write("\t"+i+"\t"+all_matched_perc_id[i]+"\t"+motus_match[i])
        outfile.write("\n")
    else:
        outfile.write("Fasta sequence: "+fasta_name+"\n")
        outfile.write("Consensus NCBI ID: "+best_id+"\n")
        outfile.write("Consensus taxonomy: "+best_taxonomy+"\n")
        if args.map_to_specI:
            outfile.write("Consensus mOTUs: "+best_motu.replace("ref_mOTU_v25_","specI_v3_")+"\n")
        else:
            outfile.write("Consensus mOTUs: "+best_motu+"\n")
        outfile.write("Number of detected genes: "+str(sum(founded_genes.values()))+"\n")
        outfile.write("Number of mapped genes: "+str(sum(all_tax.values()))+"\n")
        outfile.write("Number of genes that map to -1: "+str(n_min_1)+"\n")
        outfile.write("Percentage of agreeing genes: "+aggr_g+"\n")
        outfile.write("\nGene annotation:\n")
        for i in motus_match:
            if args.map_to_specI:
                outfile.write(i+"\t"+all_matched_perc_id[i]+"\t"+motus_match[i].replace("ref_mOTU_v25_","specI_v3_")+"\n")
            else:
                outfile.write(i+"\t"+all_matched_perc_id[i]+"\t"+motus_match[i]+"\n")

    # move the temp file to the final destination ------------------------------
    if args.output != "":
        try:
            outfile.flush()
            os.fsync(outfile.fileno())
            outfile.close()
        except:
            sys.stderr.write("[E::main] Error: failed to save the output file\n")
            sys.exit(1)
        try:
            #os.rename(outfile.name,output) # atomic operation
            shutil.move(outfile.name,args.output) #It is not atomic if the files are on different filsystems.
        except:
            sys.stderr.write("[E::main] Error: failed to save the output file\n")
            sys.stderr.write("[E::main] you can find the file here:\n"+outfile.name+"\n")
            sys.exit(1)


    return 0        # success

#-------------------------------- run main -------------------------------------
if __name__ == '__main__':
    status = main()
    sys.exit(status)
