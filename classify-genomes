#!/usr/bin/env python

from __future__ import division
import os
import sys
import argparse
import shlex
import shutil
import time
import subprocess
import glob
import multiprocessing
import tempfile


# position of the script -------------------------------------------------------
path_mOTUs = os.path.realpath(__file__)
path_array = path_mOTUs.split("/")
relative_path = "/".join(path_array[0:-1])
relative_path = relative_path + "/"

# check if setup.py has been ran already ---------------------------------------
if not(os.path.isdir(relative_path+'db_mOTU')):
    sys.stderr.write("[E::main] Error: database has not been downloaded. Run setup.py before using the motus profiler\n\n")
    sys.exit(1)


# ------------------------------------------------------------------------------
#       print the help informations
# ------------------------------------------------------------------------------
class CapitalisedHelpFormatter(argparse.HelpFormatter):
    def add_usage(self, usage, actions, groups, prefix=None):
        if prefix is None:
            prefix = ''
        return super(CapitalisedHelpFormatter, self).add_usage(usage, actions, groups, prefix)


def msg(name=None):
    str_msg = '''
\00
Program: classify-genomes - a tool for genome taxonomy annotation

Usage: classify-genomes <fasta_file> [options]

Options:
  -t INT     number of threads [1]
  -v INT     verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]
  -o FILE    output file name [stdout]
  -m FILE    save the 10 marker genes [None]
  -s         short output format (one-line output)
        '''
    return str_msg

# ------------------------------------------------------------------------------
# function to check if a specific tool exists
def is_tool(name):
    try:
        devnull = open(os.devnull)
        subprocess.Popen([name], stdout=devnull, stderr=devnull).communicate()
    except OSError as e:
        if e.errno == os.errno.ENOENT:
            return False
    return True


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------
def main(argv=None):

    parser = argparse.ArgumentParser(usage=msg(), formatter_class=CapitalisedHelpFormatter,add_help=False)
    parser.add_argument('fasta_file', action="store", default=None, help='fasta file')
    parser.add_argument('-v', action='store', type=int, default=None, dest='verbose', help='Verbose levels')
    parser.add_argument('-t', type=int, action="store", dest='threads', default=None, help='Number of threads to be used.')
    parser.add_argument('-o', action="store", dest='output', default=None, help='name of output file')
    parser.add_argument('-m', action="store", dest='save_10_MGs', default=None, help='save the 10 marker genes')
    parser.add_argument('-s', action='store_true', default=None, dest='short_output', help='print the output in only one line')
    args = parser.parse_args()

    # set default for args.verbose
    if (args.verbose is None): args.verbose = 3

    # set the default
    if (args.output is None): args.output = ""
    if (args.threads is None): args.threads = 1
    if (args.save_10_MGs is None): args.save_10_MGs = ""
    if (args.short_output is None): args.short_output = False

    # ---------------------- check general parameters --------------------------
    if args.verbose < 1:
        sys.stderr.write("[E::main] Error: verbose level (-v) is less than 1\n")
        sys.exit(1)
    if args.threads < 1:
        sys.stderr.write("[E::main] Error: number of threads (-t) is less than 1\n")
        sys.exit(1)

    # COG that we evaluate
    marker_genes = {'COG0012':0, 'COG0016':1, 'COG0018':2, 'COG0172':3, 'COG0215':4, 'COG0495':5, 'COG0525':6, 'COG0533':7, 'COG0541':8, 'COG0552':9}

    # --------------------------------------------------------------------------
    #   1. EXTRACT GENES
    # --------------------------------------------------------------------------
    # create a temp dir to save the intermediate results
    genes = tempfile.mkdtemp()

    # count the number of founded genes
    founded_genes = {'COG0012':0, 'COG0016':0, 'COG0018':0, 'COG0172':0, 'COG0215':0, 'COG0495':0, 'COG0525':0, 'COG0533':0, 'COG0541':0, 'COG0552':0}


    find_genes = "python "+ relative_path + 'makePaddedMG.py ' + args.fasta_file
    find_genes = find_genes + " " +genes+"/tmp1 tmp2 --OGType mOTU --padLength 0 --numThreads "+str(args.threads)
    if args.verbose > 3:
        sys.stderr.write("call: "+find_genes+"\n")

    find_genesCMD = shlex.split(find_genes)
    find_genes_cmd = subprocess.Popen(find_genesCMD)
    return_code = find_genes_cmd.wait()
    if return_code: sys.exit(1)

    # save the genes to a file
    genes_temp_file = tempfile.NamedTemporaryFile(delete=False, mode="w")
    os.chmod(genes_temp_file.name, 0o644)
    if args.verbose > 3:
        sys.stderr.write("temp file with genes: "+genes_temp_file.name+"\n")

    for i in marker_genes:
        file_g = open(genes+"/tmp1/tmp2_markerGenes/"+i+".fna","r")
        cont = 1
        for k in file_g:
            if k.startswith(">"):
                genes_temp_file.write(">"+i+"_"+str(cont)+"\n")
                cont = cont + 1
                founded_genes[i] = founded_genes[i] + 1 # update dict with the number of founded genes
            else:
                genes_temp_file.write(k)

    # close the temp file (but not deleted)
    genes_temp_file.flush()
    os.fsync(genes_temp_file.fileno())
    genes_temp_file.close()

    # remove temp dir
    shutil.rmtree(os.path.abspath(os.path.join(genes)))

    # --------------------------------------------------------------------------
    #   2. MAP GENES TO DATABASE
    # --------------------------------------------------------------------------
    # now in genes_temp_file.name we have all the extracted genes
    vsearch_res = tempfile.NamedTemporaryFile(delete=False, mode="w")
    os.chmod(vsearch_res.name, 0o644)
    if args.verbose > 3:
        sys.stderr.write("temp file with result from vsearch: "+vsearch_res.name+"\n")

    map_genes = "vsearch --usearch_global "+genes_temp_file.name+" --db "+relative_path+"db_mOTU/mOTU.v2b.nr.padded --id 0.95 --alnout "+vsearch_res.name+" --minqt 0.7 --threads "+str(args.threads)
    map_genesCMD = shlex.split(map_genes)
    map_genes_cmd = subprocess.Popen(map_genesCMD)
    return_code = map_genes_cmd.wait()
    if return_code:
        sys.stderr.write("Error: vsearch failed")
        sys.exit(1)

    # parse result from vsearch
    matches = dict()
    tp = open(vsearch_res.name,"r")
    for i in tp:
        if i.startswith(" Query "):
            query = i.rstrip().split(">")[1]
        if i.startswith("Target "):
            matches[query] = i.rstrip().split(">")[1]
    tp.close()

    # remove file with the results from vsearch
    os.remove(os.path.abspath(os.path.join(vsearch_res.name)))

    # decide what to do with the genes file
    if args.save_10_MGs != "": # save it somewhere
        try:
            shutil.move(genes_temp_file.name,args.save_10_MGs) #It is not atomic if the files are on different filsystems.
        except:
            sys.stderr.write("[E::main] Error: failed to save the marker genes sequences\n")
            os.remove(os.path.abspath(os.path.join(genes_temp_file.name)))
    else: # or delete it
        os.remove(os.path.abspath(os.path.join(genes_temp_file.name)))


    # --------------------------------------------------------------------------
    #   3. FIND MOTUS FROM THE MAPPED GENES
    # --------------------------------------------------------------------------
    # now in matches we have the motus database ids

    # load gene -> MGC
    



    return 0        # success

#-------------------------------- run main -------------------------------------
if __name__ == '__main__':
    status = main()
    sys.exit(status)
